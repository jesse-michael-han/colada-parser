
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  Section  Generalities  .  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  Let    x  \ne y    stand  for    \neg (  x  =  y  )    .  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  Section  Setmembership  .  
  
  In  this  section  ,  let    V__alpha  ,  V__beta    denote  types  .  
  
  Definition  Label_set_over  .    
  Let  set  over    V__alpha    be  the  type    V__alpha  \to Prop    .  
    
  
  
  
  Definition  Label_universe_over  .    
  Let  universe  over    V__alpha    equal  the  function  
    
  fun  (  \blank :  V__alpha  )  :=  
  true  .  
    
    
  
  Definition  Label_empty_set  .    
  Let    \emptyset   equal  
    
  fun  (  \blank :  V__alpha  )  :=  false  ,  
    
  inferring    V__alpha    .  
    
  
  Let  empty  set  stand  for    \emptyset   .  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  Definition  Label_notation_in  .    
  A  notation_in  is  a  notational  structure  with  
  {  
  (  parameter  )    V__beta    
  ;  (  parameter  )    V__alpha    
  ;  notation_in  :    V__alpha  \to V__beta  \to Prop    
  }  .  
    
  
  Definition  Label_in  .    
  Let    x  \in X    denote    C  .notation_in  x  X    ,  inferring  (  C  :  
  notation_in  )  .  
    
  
  Definition  Label_notin  .    
  Let    x  \notin X    denote    not  (  x  \in X  )    .  
    
  
  Definition  Label_notation_subset  .    
  A  notation_subset  is  a  notational  structure  with  
  {  
  (  parameter  ,  type  )    V__alpha    
  ;  notation_subseteq  :    V__alpha  \to V__alpha  \to Prop    
  
  }  .  
    
  
  Definition  Label_subset_notation  .    
  Let    X  \subset Y    denote  
    C  .notation_subset  X  Y    ,  
  inferring    (  C  :  notation_subset  )    .  
    
  
  
  
  
  
  
  
  
  Let    X  \subseteq Y    denote    X  \subset Y    or    (  X  =  Y  )    .  
  
  Let    X    is  a  subset  of    Y    stand  for    X  \subseteq Y    .  
  
  Let    x    is  a  member  of    X    stand  for    x  \in X    .  
  
  Let  the  value  of    f    at    x    stand  for    f  (  x  )    .  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  We  record  a  coercion  
    
  {  V__alpha  ;  V__beta  }  (  notation_in  over  V__beta  ,  V__alpha  )  :  
  (  notation_subset  over  V__beta  )  :=  
    
  a  structure  with  
  {  
  a  notation_subset  over    V__beta    
  with  properties  
  ;  for  all    (  X  Y  :  V__beta  )  ,  we  have  (  X  \subseteq Y  iff  
  for  all  x  ,  x  \in X  \rightarrow x  \in Y  )    
  }  .  
  This  exists  and  is  unique  .  
  
  
  Section  NaturalNumber  .  
  
  
  
  
  
  
  
  
  
  
  Definition  Label_typical_structure  .    
  An  typical_structure  is  a  structure  with  
  {  
  (  type  )    V__alpha  :  Type    
  }  .  
    
  
  Definition  Label_notation_zero  .    
  A  notation_zero  is  a  notational  structure  with  
  {  
    V__alpha  :  Type    
  ;    notation_zero  :  V__alpha    
  }  .  
    
  
  Let    0    stand  for    C  .notation_zero    ,  inferring  
    (  C  :  notation_zero  )    .  
  
  Definition  Label_notation_one  .    
  A  notation_one  is  a  notational  structure  with  
  {  
    V__alpha  :  Type    
  ;  notation_one    :  V__alpha    
  }  .  
    
  
  Let    1    stand  for    C  .notation_one    ,  inferring  
    (  C  :  notation_one  )    .  
  
  Definition  Label_notation_add  .    
  A  notation_add  is  a  notational  structure  with  
  {  
    V__alpha  :  Type    
  ;  notation_add    :  V__alpha  \to V__alpha  \to V__alpha    
  }  .  
    
  
  Definition  Label_notation_add  .    
  let    x  +  y    stand  for    C  .notation_add  x  y    with  precedence  
    30    and  left  associativity  ,  inferring    (  C  :  notation_add  )    .  
    
  
  Definition  Label_notation_numeral  .    
  A  notation_numeral  is  a  notational  structure  with  
  {  
  notation_one  
  ;  notation_add  
  }  .  
    
  
  
  
  
  
  
  
  
  Definition  Label_notation_mul  .    
  A  notation_mul  is  a  notational  structure  with  
  {  
    V__alpha  :  Type    
  ;  notation_mul    :  V__alpha  \to V__alpha  \to V__alpha    
  }  .  
    
  
  
  Definition  Label_notation_mul  .    
  Let    x  *  y    stand  for    C  .notation_mul  x  y    with  precedence  
    40    and  left  associativity  ,  inferring    (  C  :  notation_mul  )    .  
    
  
  Definition  Label_natural_numbers  .    
  Let    Nat    be  the  inductive  type  
    
  \alt zero    :  Nat    
  \alt succ    :  Nat  \to Nat    
    with  
  {  
  (  notation  )  notation_zero    :=  zero    
  ;  (  notation  )  notation_one    :=  succ  0    
  }  .  
    
  
  Definition  Label_natural_number_addition  .    
  We  define    add  (  m  :  Nat  )  (  n  :  Nat  )  :=    
    match  n    with  
    
  \alt   0      :=      m    
  \alt   succ  k      :=      succ  (  add  m  k  )    
    .  
  This  exists  by  recursion  .  
    
  
  Moreover  ,    Nat    implements  
  {  
  (  notation  )  notation_add    :=  add    
  }  .  
  
  Definition  Label_natural_number_multiplication  .    
  We  define    mul  (  m  :  Nat  )  (  n  :  Nat  )  :=    
    match  n    with  
    
  \alt   0      :=      0    
  \alt   k  +1      :=      succ  (  mul  m  k  +  m  )    
    .  
  This  exists  by  recursion  .  
    
  
  Moreover  ,    Nat    implements  
  {  
  (  notation  )  notation_mul    :=  mul    
  }  .  
  
  
  
  Section  List  .  
  
  
  
  
  
  
  
  In  this  section  ,  let    V__alpha    denote  a  type  .  
  
  Definition  Label_list  .    
  Let    list  {  V__alpha  }    be  the  inductive  type  
    
  \alt   null      :      list    
  \alt   cons      :      V__alpha  \to list  \to list    
    .  
    
  
  Definition  Label_null_list  .    
  Let    \nullbrack   equal  
    
  null  :  list  {  V__alpha  }  .  
    
    
  
  Definition  Label_cons  .    
  Let    (  x  :  V__alpha  )  ::  (  X  :  list  V__alpha  )    stand  for  
    
  list.cons  {  V__alpha  }  x  X  .  
    
    
  
  Definition  Label_length  .    
  Let    list.length  {  V__alpha  }  :  list  \to Nat    =  function  
    
  \alt   \nullbrack     :=      0    
  \alt   a  ::  A      :=    1  +  length  A  
    .  
  This  exists  by  recursion  .  
    
  
  Definition  Label_list_in  .    
  Let    list.in  (  x  :  V__alpha  )  :  list  \to Bool    =  function  
    
  \alt   \nullbrack     :=    false  
  \alt   a  ::  A      :=      (  x  =  a  )  \lor (  in  x  A  )    
    .  
  This  exists  by  recursion  .  
    
  
  Moreover  ,  list  implements  
  {  
  (  notation  )  notation_in    (  x  :  V__alpha  )  (  X  :  list  )  :=  in  x  X    
  }  .  
  
  
  
  
  
  
  Definition  Label_list_drop  .    
  Let    list.drop  (  x  :  V__alpha  )  :  list  \to list  :=    
  function  
    
  \alt   \nullbrack     :=    \nullbrack 
  \alt   a  ::  A      :=    
    if  (  x  =  a  )  then  A  else  a  ::  (  drop  x  A  )    
    .  
  This  exists  by  recursion  .  
    
  
  
  
  
  
  
  
  
  
  Definition  Label_is_permutation  .    
  Let    list.is_permutation  X  Y  :  Bool  :=    
  match    (  X  ,  Y  )    with  
    
  \alt   (  \nullbrack ,  \nullbrack )      :=    true  
  \alt [  5  pt  ]  
    (  x  ::  X  ,  y  ::  Y  )      :=    
    
  \{ 
  
  
  
  
  
    
    .  
  This  exists  by  recursion  .  
    
  
  Definition  Label_multiset  .    Let  multiset    {  V__alpha  }    denote  the  quotient  
  of  list    {  V__alpha  }    by  the  equivalence  relation  
  is_permutation  .  This  exists  .  
    
  
  Definition  Label_length  .    
  Let  multiset.length    (  X  :  multiset  )    denote  the  length  of  
    Y    for  each  and  every    X  =  quot  Y  is_permutation    .  
  This  exists  and  is  welldefined  .  
    
  
  
  Section  Finiteness  .  
  
  In  this  section  ,  let    V__alpha    stand  for  a  type  .  
  
  
  
  
  
  
  
  
  
  
  
  
  [  synonym  size  /  length  ]  
  
  [  synonym  element  /  point  /  carrier  ]  
  
  Definition  Label_nodup_multiset  .    
  A  duplicate_free_multiset  is  a  structure  with  
  {  
  (  parameter  )  element  :  Type  
  ;  support  :  multiset    {  element  }    
  ;  length    \dequiv   the  length  of  the  support  ,  
  with  property  
  ;  noduplicate  :  nodup  support  
  
  
  }  .  
    
  
  
  
  
  
  
  
  
  
  
  
  
  Definition  Label_set_of_nodup_multiset  .    
  We  record  a  coercion  
  \eqnarray{[(  
  set_of_duplicate_free_multiset  
  {  V__alpha  }  (  X  :  
  duplicate_free_multiset  
  over  V__alpha  )  :  set  over  V__alpha  \\\ :=  
  \setcomp {  x  }  {  x  \in support  of  X  }  .  
  )]}  
    
  
  
  Definition  Label_finite  .    
  Assume  that    (  X  :  set  over  V__alpha  )    .  We  say  that    X    is  
  finite  iff    X    is  a  member  of  the  image  of  
  set_of_duplicate_free_multiset  .  
    
  
  Let  an  equivalence    f  :  V__alpha  \to V__beta    stand  for  a  bijection    f    .  
  
  We  record  an  equivalence  
  set_of_duplicate_free_multiset  
    {  V__alpha  }  (  X  :  
  duplicate_free_multiset  
  over  V__alpha  )  :  finite  set  over  V__alpha    
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  Subsection  finitetypes  .  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  Section  Order  .  
  
  Definition  Label_binary_relation  .    
  A  binary_relation  is  a  structure  with  
  {  
  (  parameter  ,  type  )  element  :  Type  
  ;  a    relation  :  element  \to element  \to Prop    
  }  .  
    
  
  In  this  section  ,  fix  a  binary  relation    R    .  
  
  In  this  section  ,  let    (  s  x  y  z  :  R  .element  )    .  
  
  In  this  section  ,  let    x  \le y    stand  for    R  .relation  x  y    .  
  
  Definition  Label_reflexive  .    We  say    R    is  reflexive  iff  for  all    x  ,  x  
  \le x    .  
    
  
  Definition  Label_transitive  .    We  say    R    is  transitive  iff  for  
  all    x  y  z  ,  x  \le y  \land y  \le z  \to x  \le z    .  
    
  
  Definition  Label_symmetric  .    We  say    R    is  symmetric  iff  for  
  all    x  y  ,  x  \le y  \to y  \le x    .  
    
  
  Definition  Label_preorder  .    We  say    R    is  a  preorder  iff    R    is  symmetric  
  and  transitive  .  
    
  
  Definition  Label_equivalence_relation  .    We  say    R    is  an  
  equivalence  relation  iff    R    is  reflexive  ,  symmetric  and  transitive  .  
    
  
  Definition  Label_antisymmetric  .    We  say    R    is  antisymmetric  iff  for  
  all    x  y  ,  x  \le y  and  y  \le x  imply  x  =  y    .  
    
  
  Definition  Label_total  .    Assume  that    R    is  a  preorder  .  We  say  that    R    is  
  total  iff  for  all    (  x  y  )  ,  x  \le y  or  y  \le x    .  
    
  
  Definition  Label_poset  .    We  say  that    R    is  a  poset  iff    R    is  an  
  antisymmetric  preorder  .  
    
  
  Let  partially  ordered  set  stand  for  poset  .  
  
  Definition  Label_linear_order  .    We  say  that    R    is  a  linear  order  iff    R    
  is  a  total  poset  .  
    
  
  Let  total  order  denote  linear  order  .  
  
  [  synonym  greatest  /  maximum  /  top  ]  
  
  Definition  Label_greatest_element  .    We  say  that    y    is  a  
  greatest  element  in    R    iff  for  all    x  ,  x  \le y    .  
    
  
  [  synonym  least  /  minimum  /  bottom  ]  
  
  Definition  Label_least_element  .    We  say  that    y    is  a  least  element  in  
    R    iff  for  all    x  ,  y  \le x    .  
    
  
  Let    x  <  y    stand  for    x  \le y    and    x  \ne y    .  
  
  Definition  Label_maximal_element  .    We  say  that    y    is  a  maximal  element  
  in    R    iff  there  exists  no    x    such  that    y  <  x    .  
    
  
  Definition  Label_minimal_element  .    We  say  that    y    is  a  minimal  element  
  in    R    iff  there  exists  no    x    such  that    x  <  y    .  
    
  
  Definition  Label_irreflexive  .    We  say  that    R    is  irreflexive  iff  there  
  exists  no    x    such  that    x  <  x    .  
    
  
  Definition  Label_asymmetric  .    We  say  that    R    is  asymmetric  iff  for  
  all    x  y  ,  x  <  y  implies  that  not  y  <  x    .  
    
  
  Definition  Label_strict_partial_order  .    We  say  that    R    is  a  
  strict_partial_order  iff    R    is  irreflexive  ,  transitive  ,  and  
  asymmetric  .  
    
  
  Let    S    denote  a  set  over    R    .  
  
  Definition  Label_upper_bound  .    We  say    x    is  an  upper  bound  of    S    in    R    
  iff    s  \le x  for  all  s  \in S    .  
    
  
  Definition  Label_lower_bound  .    We  say    x    is  a  lower  bound  of    S    in    R    
  iff    x  \le s    for  all    s  \in S    .  
    
  
  Definition  Label_wellfounded  .    We  say  that    R    is  wellfounded  iff  for  
  every    S    such  that    S  \ne \emptyset   there  exists  a  lower  bound    s    of  
    S    such  that    s  \in S    .  
    
  
  [  synonym  least  upper  bound  /  join  /  supremum  ]  
  
  [  synonym  greatest  lower  bound  /  meet  /  infimum  ]  
  
  Definition  Label_least_upper_bound  .    We  say    x    is  a  least  upper  bound  of  
    S    in    R    iff    x    is  an  upper  bound  of    S    such  that  for  every  upper  
  bound    y    of    S    we  have    x  \le y    .  
    
  
  Definition  Label_greatest_lower_bound  .    We  say    x    is  a  
  greatest  lower  bound  of    S    in    R    iff    x    is  a  lower  bound  of    S    such  that  for  
  every  lower  bound    y    of    S    we  have    y  \le x    .  
    
  
  Definition  Label_join_semilattice  .    We  say    R    is  a  join  semilattice  iff  
  for  every    (  x  y  )  ,    there  exists  a  least  upper  bound  of    \setenum {  x  ,  y  }    in  
    R    .  
    
  
  Definition  Label_meet_semilattice  .    We  say    R    is  a  meet  semilattice  iff  
  for  every    x  ,  y    there  exists  a  greatest  lower  bound  of    \setenum {  x  ,  y  }    in  
    R    .  
    
  
  Definition  Label_join  .    Assume    R    is  a  join  semilattice  .  Let  
    join  x  y    be  the  least  upper  bound  of    \setenum {  x  ,  y  }    in    R    .  
  This  exists  and  is  unique  .  
    
  
  Definition  Label_meet  .    Assume    R    is  a  meet  semilattice  .  Let  
    meet  x  y    be  the  greatest  lower  bound  of    \setenum {  x  ,  y  }    in    R    .  
  This  exists  and  is  unique  .  
    
  
  Definition  Label_lattice  .      R    is  a  lattice  iff    R    is  a  join  semilattice  
  and  a  meet  semilattice  .  
    
  
  
  Section  OrderNotation  .  
  
  Definition  Label_notation_le  .    
  A  notation_le  is  a  notational  structure  with  
  {  
  (  type  )    V__alpha  :  Type    
  ;  notation_le  :    V__alpha  \to V__alpha  \to Prop    
  
  
  
  
  }  .  
    
  
  Let    x  \le y    denote    C  .notation_le  x  y    ,  inferring  
    (  C  :  notation_le  )    .  
  
  Let    x  <  y    stand  for    x  \le y    and    x  \ne y    .  
  
  Let    x  \ge y    stand  for    y  \le x    .  
  
  Let    x  >  y    stand  for    y  <  x    .  
  
  Let    m    is  at_most    n    stand  for    m  \le n    .  
  
  Let    n    is  at_least    m    stand  for    n  \ge m    .  
  
  Let    m    is  less_than    n    stand  for    m  <  n    .  
  
  Let    n    is  greater_than    m    stand  for    n  >  m    .  
  
  
  Section  MoreonNaturalNumbers  .  
  
  In  this  section  ,  let    m  ,  n  ,  d  ,  p  ,  r    denote  natural  numbers  .  
  
  Definition  Label_nat_le  .    
  We  say  that    nat_le  m  n    iff  there  exists    d    such  that    m  +  d  =  n    .  
    
  
  We  record  a  wellfounded  total  order  ,  where  
  {  
  relation    \dequiv nat_le    
  ;  (  notation  )  notation_le    :=    relation  
  }  .  
  This  exists  and  is  unique  .  
  
  
  
  
  
  
  
  
  [  synonym  number  /-  s  ]  
  
  Let  natural  number  stand  for  Nat  .  
  
  Definition  Label_divides  .    
  We  say  that    d    divides    m    iff    d  \ne 0    and  there  exists    r    
  such  that    m  =  d  *  r    .  
    
  
  
  
  
  
  Let    \natdiv {  d  }  {  m  }    stand  for    d    divides    m    .  
  
  Let    d    is  a  divisor  of    m    stand  for    d    divides    m    .  
  
  
  
  
  
  Definition  Label_natpow  .    
  Assume  that    b  ,  n    are  natural  numbers  .  We  define  
    \natpow {  b  }  {  n  }  :=    
    match  n    with  
    
  \alt   0      :=      1    
  \alt   m  +  1      :=      b  *  \natpow {  b  }  {  m  }    
    .  
  This  exists  by  recursion  .  
    
  
  Definition  Label_prime  .    
  Assume  that    p    is  a  natural  number  greater  than    1    .  We  say  that    p    
  is  a  prime  iff  each  divisor  of    p    is  equal  to    1    or  is  equal  to  
    p    .  
    
  
  Definition  Label_multiplicity  .    
  The  multiplicity  of    p    in    n    is  the  natural  number    m    such  that  
    
  \natpow {  p  }  {  m  }  divides  n  and  \natpow {  p  }  {  m  +1  }  
  does  not  divide  n  .  
    
  This  exists  and  is  unique  .  
    
  
  
  Section  Grouptheory  .  
  
  
  
  Definition  Label_magma  .    
  A  magma  is  a  structure  with  
  {  
  (  type  ,  parameter  )  element  :  Type  
  ;  an    op  :  element  \to element  \to element    
  ;  (  notation  )    notation_mul  :=  op    
  }  .  
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  Definition  Label_abelian  .    
  Assume  that    (  M  :  magma  )    .  
  M  is  abelian  iff  for  all    (  x  y  :  M  )    ,    x  *  y  =  y  *  x    .  
    
  
  Definition  Label_semigroup  .    
  A  semigroup  is  a  structure  with  
  {  
  a  magma  
  with  property  
  ;  associativity  :  for  all    (  x  y  z  :  
  element  )  ,  x  *  y  *  z  =  (  x  *  y  )  *  z    
  }  .  
    
  
  
  
  
  
  
  Definition  Label_monoid  .    
  A  monoid  is  a  structure  with  
  {  
  a  semigroup  
  ;  a  unit  :  element  
  ;  (  notation  )    notation_one  :=  unit    
  with  property  
  ;  for  all    x  ,  x  *  1  =  1  *  x  =  x    
  }  .  
    
  
  Definition  Label_notation_inverse  .    
  A  notation_inverse  is  a  notational  structure  with  
  {  
  (  parameter  )    V__alpha  :  Type    
  ;  notation_inverse  :    V__alpha  \to V__alpha    
  }  .  
    
  
  
  Let    \inv {  x  }    stand  for    C  .notation_inverse  x    ,  inferring  
    (  C  :  notation_inverse  )    ,  
  
  Definition  Label_group  .    
  A  group  is  a  structure  with  
  {  
  a  monoid  
  ;  an  inv  :    C  \to C    with  properties  
  ;  (  notation  )    notation_inverse  :=  inv    
  ;    \forall (  x  :  C  )  ,  x  *  \inv {  x  }  =  \inv {  x  }  *  x  =  1    
  }  
  where  {  C  :=  element  }  .  
    
  
  
  Section  Ringandmodules  .  
  
  
  
  
  
  
  
  
  
  
  Definition  Label_notation_neg  .    
  A  notation_neg  is  a  notational  structure  with  
  {  
    V__alpha  :  Type    
  ;    notation_neg  :  V__alpha  \to V__alpha    
  }  .  
    
  
  Let    -  x    stand  for    C  .notation_neg  x    ,  inferring  
    (  C  :  notation_neg  )    .  
  
  
  Definition  Label_additive_group  .    
  An  additive  group  is  a  structure  with  
  {  
  a  group  without  notation  
  ;  (  notation  )    notation_zero  :=  unit    
  ;  (  notation  )    notation_add  :=  op    
  ;  (  notation  )    notation_neg  :=  inv    
  }  .  
    
  
  
  Definition  Label_ring  .    
  A  ring  is  a  structure  with  
  {  
  an  abelian  additive  group  
  ;  an    op\'  :  C  \to C  \to C    
  ;  a    unit\'  :  C    
  ;  (  notation  )    notation_mul  :=  op\'    
  ;  (  notation  )    notation_one  :=  unit\'    
  with  properties  
  ;  unit_axiom\'  :    \forall x  :  C  ,  1  *  x  =  x  *  1  =  x    
  ;  mul_associativity  :    \forall x  y  z  :  C  ,  x  *  y  *  z  =  x  *  (  y  *  z  )    
  ;  right_distributivity  :    \forall x  y  z  :  C  ,  (  x  +  y  )  *  z  =  x  *  z  +  y  *  z    
  ;  left_distributivity  :  
    \forall x  y  z  :  C    ,    z  *  (  x  +  y  )  =  z  *  x  +  z  *  y    
  }  
  where  {  C  :=  element  }  .  
    
  
  
  
  
  
  
  
  
  
  Definition  Label_monoid_of_ring  .    
  We  make    monoid_of_ring  (    R    :  ring  )  :  monoid  :=    
  {  
  
  unit    :=  R  .unit\'    
  ;  op    :=  R  .op\'    
  ;  \blank 
  }  .  
    
  
  
  Definition  Label_commutative  .    
  Assume  that    R    is  a  ring  .  We  say  that    R    is  
  commutative  iff  for  every    (  x  y  :  R  )  ,  x  *  y  =  y  *  x    .  
    
  
  
  Definition  Label_nontrivial  .    
  Assume  that    R    is  a  ring  .  
  We  say  that    R    is  nontrivial  iff    (  0  :  R  )  \ne (  1  :  R  )    .  
    
  
  
  Definition  Label_unit  .    
  Assume  that    R    is  a  commutative  ring  .  Assume  that  
    (  x  :  R  )    .  We  say  that    x    is  a  unit  in    R    iff  there  exists    (  y  
  :  R  )    such  that    x  *  y  =  y  *  x  =  1    .  
    
  
  
  Definition  Label_notation_dot  .    
  A  notation_dot  is  a  notational  structure  with  
  {  
  (  parameter  ,  type  )    V__alpha  ,  V__beta  :  Type    
  ;  (  notation  )  notation_dot  :    V__alpha  \to V__beta  \to V__beta    
  }  .  
    
  
  Let    r  \cdot x    stand  for    C  .notation_dot  r  x    with  precedence  
    50    and  left  associativity  ,  inferring    (  C  :  notation_dot  )    .  
  
  
  Definition  Label_left_module  .    
  A  left  module  is  a  structure  with  
  {  
  (  parameter  )    R    :  ring  
  ;  an  additive  group  
  ;  a  scalar_multiplication  :  
    R  .element    \to   element    \to   element  
  ;  (  notation  )    notation_dot  :=  scalar_multiplication    
  with  properties  
  ;  left_linear  :  
  for  all    r  ,  x  ,  y  ,  r  \cdot (  x  +  y  )  =  r  \cdot x  +  r  \cdot y    
  ;  right_linear  :  
  for  all    r  ,  s  ,  x  ,  (  r  +  s  )  \cdot x  =  r  \cdot x  +  s  \cdot x    
  ;  multiplicative  :  
  for  all    r  ,  s  ,  x  ,  (  r  *  s  )  \cdot x  =  r  \cdot (  s  \cdot x  )    
  ;  unital  :  for  all    x  ,  1  \cdot x  =  x    
  }  .  
    
  
  
  Section  Thefieldofrealnumbers  .  
  
  Definition  Label_field  .    
  A  field    R    is  a  nontrivial  commutative  ring  such  that  for  all    x  \ne 0    ,    x    is  a  unit  in    R    .  
    
  
  Definition  Label_vector_space  .    
  A  vector  space  is  a  structure  with  
  {  
  a  left  module  
  ;  (  parameter  )    R    :  field  
  }  .  
    
  
  
  Definition  Label_ordered_ring  .    
  An  ordered  ring  is  a  structure  with  
  {  
  a  ring  
  ;  a  linear  order  with  properties  
  ;  (  notation  )    notation_le  :=    relation  
  ;  for  all    (  x  y  z  )    ,  if    x  \le y    then    x  +  z  \le y  +  z    
  ;  for  all    (  x  y  )    ,  if    0  \le a    and    0  \le b    ,  then    0  \le a  *  b    
  }  .  
    
  
  
  
  
  
  Definition  Label_ordered_field  .    
  An  ordered  field  is  a  a  structure  with  
  {  
  an  ordered  ring  
  ;  a  field  
  }  .  
    
  
  Definition  Label_complete  .    
  Assume  that    F    is  an  ordered  field  .  
  We  say  that    F    is  complete  iff  
  for  every  subset    S    of  the  universe  of    F    ,  
  if    S  \ne \emptyset   and    S    has  an  upper  bound  in    F    then    S    has  a  least  upper  bound  in    F    .  
    
  
  Definition  Label_absolute_value  .    
  Let  
    ordered_field.absolute_value  (  x  :  element  )  :  element  :=    
    
  case  
  \alt 0  \le x  :=  x  
  \alt true  :=  -  x  
  end  .  
    
  This  exists  and  is  unique  and  total  .  
    
  
  
  Definition  Label_isomorphism_of_complete_ordered_fields  .    
  Assume  that    F    and    G    are  complete  ordered  fields  .  
  An  isomorphism  of  complete  ordered  fields    F  ,  G    is  a  bijection  
    
  f  :  F  \to G  
    
  such  that  
  \eqnarray{[(  
  \forall x  y  ,  f  (  x  +  y  )  =  f  (  x  )  +  f  (  y  )  \land f  (  x  *  y  )  =  f  (  x  )  *  f  (  y  )  \land \\\ 
  \forall x  y  ,  x  \le y  iff  f  (  x  )  \le f  (  y  )  .  
  )]}  
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  Definition  Label_real  .    
  Let  Real  be  the  complete  ordered  field  .  
  This  exists  and  is  canonical  .  
    
  
  Subsection  norms  .  
  
  Let    |  (  x  :  Real  )  |    denote  absolute_value    x    .  
  
  Definition  Label_normed_commutative_ring  .    
  A  normed  commutative  ring  is  a  structure  with  
  {  
  a  commutative  ring  
  ;  an  absolute_value  :  element    \to Real    
  with  properties  
  ;  non_negativity  :  for  all    x    ,    A  x  =  0  iff  x  =  0    
  ;  triangle_inequality  :  for  all    x  y  ,  A  (  x  +  y  )  \le A  x  +  A  y    
  ;  submultiplicative  :  for  all    x  y  ,  A  (  x  *  y  )  \le (  A  x  )  *  (  A  y  )    
  
  }  
  where  {  A  :=  absolute_value  }  .  
    
  
  Definition  Label_normed_field  .    
  A  normed  field  is  a  structure  with  
  {  
  a  normed  commutative  ring  
  ;  a  field  
  }  .  
    
  
  
  Subsection  meetsemilatticeofsubgroups  .  
  
  
  
  
  
  
  
  
  
  
  Definition  Label_subgroup  .    
  A  subgroup  is  a  structure  with  
  {  
  (  parameter  )  ambient_group  :  group  
  ;  (  type  )  support    :  set  over  ambient_group    
  with  properties  
  ;  nonempty  :    1  \in support    and  
  ;  closure  :  for  all    x  ,  y  \in support  ,  x  *  \inv {  y  }  \in support    
  }  .  
    
  
  
  Definition  Label_subgroup_semilattice  .    Let  
  subgroup_semilattice  
    (  G  :  group  )  :  meet_semilattice  :=    
  {  
    element  :=  subgroup  over  G    
  ;    relation  H_1  H_2  :=  for  all  x  ,  x  \in H_1  \to x  \in 
  H_2    
  ;  \blank 
  }  .  
  This  exists  and  is  unique  .  
    
  
  
  
  
  
  
  
  
  
  Assume  that    G    is  a  finite  group  ,  let  
  the  order  of    G    stand  for  the  size  of    G    .  
  
  Definition  Label_subgroup_order  .    
  Assume  that    H    is  a  subgroup  over  a  finite  group    G    .  
  The  subgroup_order  of    H    is  the  size  of  the  support  of    H    .  
  This  exists  and  is  well  subtyped  .  
    
  
  
  Section  SylowsTheorems  .  
  
  In  this  section  ,  let    G    denote  a  fixed  finite  group  .  
  
  
  
  
  
  In  this  section  ,  let    \conj {  g  }  {  X  }    stand  for  
    
  \setcomp {  g  *  x  *  \inv {  g  }  }  {  x  \in X  }  ,  
    
  where    (  g  :  G  )      (  X  :  set  G  )    .  
  
  Definition  Label_conjugate  .    
  Assume  that    (  g  :  G  )    .  Assume  that    H    is  a  subgroup  over    G    .  The  
  conjugate  of    H    by    g    in    G    is  the  subgroup    \conj {  g  }  {  H  }    over    G    .  
    
  
  Definition  Label_normalizer  .    
  Assume  that    H    is  a  subgroup  over    G    .  The  normalizer  of    H    
  in    G    is  the  subgroup    N    over    G    such  that  for  all    x    ,    x  \in N  
  iff  \conj {  x  }  {  H  }  =  H    .  This  
  exists  and  is  unique  .  
    
  
  
  Let    |  G  |    denote  the  order  of    G    .  
  
  In  this  section  ,  let    p    denote  a  fixed  prime  number  .  
  
  
  
  
  
  
  
  
  In  this  section  ,  let    \mult {  p  }  {  G  }    denote  the  multiplicity  of    p    in  
    |  G  |    .  
  
  
  Definition  Label_Sylow  .    
  A  Sylow  p  subgroup  of    G    is  a  subgroup    P    over    G    such  that  
  the  subgroup_order  of    P    is    \natpow {  p  }  {  \mult {  p  }  {  G  }  }    .  
    
  
  
  
  Definition  .    Let    \Syl {  p  }  {  G  }  =  
  \setcomp {  P  }  {  (  P  is  a  Sylow  p  subgroup  of  G  )  }    .  
    
  
  
  
  Let    \SylN {  p  }  {  G  }    denote  the  size  of    \Syl {  p  }  {  G  }    .  This  is  well  
  subtyped  
  .  
  
  
  
  
  Definition  .    Let    \Nz {  p  }  {  G  }    be  equal  to  
  the  size  of  the  normalizer  of  each  and  every  Sylow    p    subgroup  of    G    .  
  This  exists  ,  is  unique  ,  and  is  well_defined  .  
    
  
  
  Theorem  .    There  exists  a  Sylow    p    subgroup  of    G    .  
    
  
  
  Theorem  .    If    P  ,  P\'    are  Sylow    p    subgroups  of    G    then  there  exists    (  g  :  G  )    
  such  that    P\'  =  \conj {  g  }  {  P  }    .  
    
  
  
  Theorem  .    Assume  that    |  G  |  =  p\'  *  \natpow {  p  }  {  m  }    .  
  We  have    \SylN {  p  }  {  G  }    divides    p\'    .  
    
  
  
  Theorem  .    We  have    p    divides    (  \SylN {  p  }  {  G  }  -  1  )    .  
    
  
  
  Theorem  .    We  have    \SylN {  p  }  {  G  }  *  \Nz {  p  }  {  G  }  =  |  G  |    .  
    
  
  
  
  
  
