% Test scripts for CNL-CIC.

% Sections. 

Article .
article.
Article The_Riemann_Hypothesis .

Section.
section analytic_continuation.

subsection.
Subsection Riemann_zeta_function.

Subsubsection.
SubSubSection critical_strip .

%% labels can be any atomic identifier.

article A1'.
article A_iii.
article A''.
article A'1'2.
% error periods are not allowed in labels: section 1.2.

Section test_instruction.

Subsection test_command.

[exit]
[Exit]
[ exit ]

Subsection test_synonym.

% Synonyms should be recognized in any context
% where tokens are expected.

[synonym set/-s]
[ synonym number /- s ]
[ synonym element / elements /elemental ]
[synonym almost everywhere / ae ]
[ synonym almost all/all but finitely many]

Subsection test_string_instruction.

[read "algebra.cnl"]
[ library "analysis" ]
[ Read "topology.cnl" ]

Subsection test_int_instruction

[timelimit 1000]

Subsection test_bool_instruction

[printgoal true]
[ PRINTGOAL on ]
[Dump off]
[ dump on ]

Section test_declaration.

Subsection test_axiom.

% XX We need to introduce natural number, positive, ...

Let nat be a type.
Let x, y, z, w, r, t, s stand for nat.

Axiom. (x : nat) is positive.

axiom Zero_np. (x : nat) is not positive.

Axiom.  Let x be positive.  Then (x : nat) is positive.

% test assumptions.
axiom random''. Let x be positive.  We assume y is positive.
We suppose z is positive.  Let us assume w is positive.
We can suppose that r is positive.
Let us assume that t is positive.
We can assume s is positive.
(x : nat) is not positive.

conjecture. (x : nat) is positive.

Conjecture pos_33'. (x : nat) is positive .

hypothesis A_A . (x : nat) is positive.

Hypothesis A'B.  (x : nat) is positive.

Subsection test_definition.

Subsubsection test_predicate_definition.

Definition .
x is renormalizable iff x is positive.

Definition X1  . 
We say that x is remarkable iff x is positive.

Definition X2.
(x : nat) is more remarkable iff x is positive.

Definition X3.
x is called most remarkable iff x is positive.

Definition X4.
We say x is called fully remarkable iff x is positive.

Definition X5.
We say that x gobbles y iff x is positive and y is positive.

Definition X6.
We say that x, y collide iff x is positive.

Definition X7.
We say that x,y are distinct iff x is positive.

Definition X8.
We say that x,y are called distinct iff x is positive.

Definition X9.
x half gobbles y iff x is positive and y is positive.

Definition X10.
x contracts onto y iff x is positive and y is positive.

Definition X11.
We say that x converges iff x is positive.

Definition X12.
We say that x converges to y in the mean iff x is positive.

Subsubsection test_symbolic_predicate_definition.

Definition X13.
We say that x > y iff x is positive.

Definition X14.
We say that x >. y (with precedence 70) iff x is positive.

Definition X15.
We say that x >. y with precedence 70 iff x is positive.

Definition X16.
x >. y with precedence 70 and no associativity iff x is positive.

Definition X17.
We say x >. y with (with precedence 70 and left associativity) iff x is positive.

Definition X18.
We say that x >. y with precedence 30 and right associativity iff x is positive.

Definition X19.
We say that x >. y WiTh PReCEDENCE 70 and RIGHT ASSOCIATIVITY iff x is positive .

Definition X20.
We say that x ++ y -- z iff y is positive.

Definition X21.
We say that x ++ y -- z with precedence 70 iff y is positive.

Definition X22.
We say that x ..>.. y iff x is positive.

Definition X23.
x! iff x is positive.

Definition X24.
!^ x iff x is positive.

Subsubsection test_identifier_predicate_definition.

Definition X25.
We say that TotallyPositive33 x y z iff x is positive.

Definition X26.
We say that IsOrdered { z : C } (x y : A) r (s : B) iff x is positive.

Subsection test_function_definition.

Subsubsection test_function_token.

Definition F1.
Let us define the residue of x to be (0 : nat).

Definition F2.
Let us define the residue of x := (0 : nat).

Definition F3.
The resiue of x denotes (0 : nat).

Definition F4.
The residue of x stands for (0 : nat).

Definition F5.
The residue of x is defined as (0 : nat).

Definition F6.
The residue of x is defined to be (0 : nat).

Definition F7.
The residue of x is said to be (0 : nat).

Definition F8.
We can define the residue of x to be (0 : nat).

Definition F9.
We define the residue of x to be (0 : nat).

Definition F10.
We define the residue of x := (0 : nat).

Definition F11.
The residue of x is (0 : nat).

Definition F12.
The residues of x are (0 : nat).

Definition F13.
The principal component of x with respect to y is (0 : nat).

Definition F14.
The main element of x in z through y is (0 : nat).

Subsubsection test_function_symbol.

Definition F15.
Let x + y (with precedence 70 and left associativity) := (0 : nat).

Definition F16.
Let x + y with precedence 70 and left associativity := (0 : nat).

Definition F17.
Let x .. y with precedence 70 and no associativity := (0 : nat).

Definition F18.
Let n! := (0 : nat).

Definition F19.
Let ++n := (0 : nat).

Definition F20.
Let x + y +++ z (with precedence 70) be (0 : nat).

Subsubsection test_function_identifier.

Definition F21.
Let cos x := (0 : nat).

Definition F22.
Define sin x := (0 : nat).

Definition F23.
Define arctan y := (0 : nat).

Definition F24.
We can define exp (x : nat) to be (0 : nat).

Definition F25.
We can define arg (x y : nat) to be (0 : nat).

Definition F26.
Let sin (theta : nat) := theta.

Subsection test_this_exists.

Definition F27.
Let sin x := x.
This exists.

Definition F28.
Let sin x := x.
This is canonical.

Definition F29.
Let sin x := x.
This is welldefined.

Definition F30.
Let sin x := x.
This is well defined.

Definition F31.
Let sin x := x.
This is total.

Definition F32.
Let sin x := x.
This is well propped.

Definition F33.
Let sin x := x.
This is wellpropped.

Definition F34.
Let sin x := x.
This is exhaustive.

Definition F35.
Let sin x := x.
This exists by recursion.

Definition F36.
Let sin x := x.
This is unique and welldefined.

Definition F37.
Let sin x := x.
This is unique, total and exhaustive.

Definition F38.
Let sin x := x.
This exists and is unique.

Definition F39.
Let sin x := x.
This exists by recursion, is exhaustive and is unique.

Definition F40.
Let sin x := x.
This is unique and exists.

Definition F41.
Let sin x := x.
This is total, exhaustive and is canonical.

Subsubsection test_theorem.

Theorem.
1 is positive.

Lemma.
1 is positive.

Proposition.
1 is positive.

Corollary.
1 is positive.

Theorem T1.
1 is positive.

Lemma T2 .
1 is positive.

Proposition T3 .
1 is positive.

Corollary T4 .
1 is positive.

COROLLARY.
1 is positive.

Theorem T5.
Then 1 is positive.

THEoREM T6.
Therefore 1 is positive.

Theorem T7.
Hence 1 is positive.

Theorem T8.
1 is positive (by T77).

Theorem T9.
1 is positive (by T77, T88).

Theorem T10.
1 is positive (by T77 and T88).

Theorem T11.
1 is positive (by T77, T88 and T99).

Theorem T12.
1 is positive (by T77 and T88 and T99).

Theorem.
1 is positive (by section T77 and definition T84).

Theorem.
1 is positive (by section T77 and Axiom T88 and corollary T33).

Theorem.
1 is positive (by section T77, T88, theorem T99).

% assumptions. 

Theorem T13.
Assume that 1 is positive.
Then 1 is positive.

THeorem T14.
Let 1 be positive.
Then 1 is positive.

Theorem T15.
Let us suppose that 1 is positive.
Then 1 is positive.

Theorem T16.
Assume that 1 is positive.
Assume that 0 is positive.
THen 1 is positive.

Theorem T17.
Assume that 1 is positive.
Let us assume that 2 is positive.
Then 1 is positive.

Theorem T18.
Let (0 : nat).
THEN 1 is positive.

Theorem T19.
Let (0 1 : nat) (2 : nat).
Then 1 is positive.

Theorem T20.
1 is positive. 

Proof.  Qed.

Theorem T21.
1 is positive.
Proof. Trivial.

Theorem T22. 1 is positive. Proof. Obvious.

Theorem T23. 
1 is positive.
Proof. 1 is positive. Qed.

Theorem T24.
1 is positive.
Proof. 0 is positive. 1 is positive. Obvious.

%phrase_list_proof_statement
Theorem T25.
1 is positive.
Proof. The proof is obvious. Qed.  

Theorem T26.
1 is positive.
Proof.  We proceed as follows. 1 is positive. Qed.

Theorem T27.
1 is positive.
Proof. 0 is positive. The other cases are similar. QED.

Theorem T28.
1 is positive.
Proof. The proof is easy. QED.

Theorem T29.
1 is positive.
Proof. The proof is routine. QED.

Theorem T30.
1 is positive.
Proof.  1 is positive.  The theorem now follows. QED.

Corollary T31.
1 is positive.
Proof. 1 is positive. The corollary now follows. QED.

Theorem T32.
1 is positive.
Proof. We proceed as follows. 1 is positive.
The theorem now follows. qed.

% phrase_list_transition.
Theorem T33.
1 is positive.
Proof. A basic fact is that 1 is positive. 
The theorem follows. QED>

Theorem T34.
1 is positive.
Proof. Of course, 1 is positive. QED.

Theorem T35.
1 is positive.
Proof. Obviously 1 is positive. QED.

Theorem T36.
1 is positive.
Proof. Clearly, 1 is positive. QED.

Theorem T37.
1 is positive.
Proof. Certainly, computations show that 1 is positive. QED.

Theorem T38.
1 is positive.
Proof. It is clear that 1 is positive.  
In summary, 1 is positive. QED.

Theorem T39.
1 is positive.
Proof. 2 is positive. 1 is positive.
In other words, 1 is positive.
More precisely, it is trivial to see that 1 is positive.
Therefore 1 is positive. QED.

Theorem T40.
1 is positive.
Proof. To begin with 1 is positive.
Therefore, we see that 1 is positive. QED.

Theorem T41.
1 is positive.
Proof. We show that 1 is positive.
The point is that 1 is positive. 
Thus, we see that 1 is positive. QED.

Theorem T42.
1 is positive.
Proof.
Of course 1 is positive.  On the other hand,
0 is not positive.  Also, we emphasize that 1 is
positive. Therefore 1 is positive. QED.

Theorem T46.
1 is positive.
Proof.


Theorem T43.
1 is positive.
Proof.
Choose a nat i.
Therefore 1 is positive. QED.

Theorem T44.
1 is positive.
Proof.
Choose i > 0.
Specifically, 1 is positive. QED.

Theorem T45.
1 is positive.
Proof. 
Choose a nat k.
Moreover, take i > 0, j > 0 (by theorem T44).
That is, 1 is positive. QED.

Theorem T46.
1 is positive.
PROOF.
Choose i > 0. Indeed 3 is positive. 
QED.

Theorem T46.
1 is positive.
PROOF.
Choose i > 0. Indeed 3 is positive. 
QED.

Theorem T47.
1 is positive.
PROOF.
CHoose i > 0. 
  Proof. End.
Then 1 is positive.
QED.

Theorem T48.
1 is positive.
Proof.
Choose i > 0.
Case i = 1. The proof is easy. QED.
Case i = 2. Similarly, the proof is easy. QED.
The result follows.
QED.

Theorem T49.
1 is positive.
Proof.
Let us prove that 2 is positive.
       Clearly, 2 is positive. QED.


Section test_terms.

